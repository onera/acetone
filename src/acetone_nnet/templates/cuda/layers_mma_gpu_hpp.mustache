#ifndef LAYERS_HPP_
#define LAYERS_HPP_

#include <cuda.h>
#include <cuda_runtime.h>
#include <stdio.h>
#include <math.h>
#include <mma.h>

#include "inference.hpp"

template< typename T >
void cuda_check(T result, const char *const file, const int line)
{
    if (result)
    {
        fprintf(stderr, "CUDA error in %s:%d result=%d: %s\n", file, line, static_cast<unsigned int>(result), cudaGetErrorString(result));
        exit(EXIT_FAILURE);
    }
}

/// @brief Call CUDA function and check for errors
#define cuda_check_errors(call) cuda_check ( (call), __FILE__, __LINE__ )

{{#has_input}}{{>input_hpp}}{{/has_input}}

{{#has_convolution2D}}{{{convolution2D_implementation}}}{{/has_convolution2D}}

{{#has_max_pooling2D}}{{>maxpooling2D_hpp}}{{/has_max_pooling2D}}

{{#has_average_pooling2D}}{{>averagepooling2D_hpp}}{{/has_average_pooling2D}}

{{#has_dense}}{{>dense_hpp}}{{/has_dense}}

{{#has_softmax}}{{>softmax_hpp}}{{/has_softmax}}

#endif